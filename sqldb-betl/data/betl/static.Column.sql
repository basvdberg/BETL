--EXEC sp_generate_merge @schema = 'static', @table_name ='Column'SET NOCOUNT ONMERGE INTO [static].[Column] AS [Target]USING (VALUES  (10,N'_eff_dt',N'effective timestamp',999,-800,N'datetime',NULL,NULL,0,N'DESC',NULL,1,1,NULL,NULL,NULL,NULL) ,(21,N'_delete_dt',N'date and time of deletion',999,-700,N'datetime',NULL,NULL,1,NULL,NULL,1,1,NULL,NULL,'2019-11-29T12:40:57.697',N'') ,(25,N'_source',N'name of source system',999,999,N'varchar',10,NULL,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) ,(30,N'_transfer_id',N'transfer_id ( logging and lineage) ',999,999,N'int',NULL,NULL,0,NULL,1,1,1,1,1,NULL,NULL) ,(50,N'_exp_dt',N'expiration timestamp',999,999,N'datetime',NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) ,(70,N'_batch_id',N'batch_id ( parent of transfer_id, orchestration). ',999,999,N'int',NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) ,(90,N'_is_current',N'this record is the latest record in transaction time  (_eff_dt)',999,999,N'bit',NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,NULL,'2019-12-11T09:56:35.373',N'') ,(100,N'_mutation_dt',N'timestamp of record mutation via update sql',999,999,N'datetime',NULL,NULL,1,NULL,NULL,NULL,NULL,NULL,NULL,'2019-12-11T09:57:32.423',N'') ,(110,N'_mutation_user',N'user name of record mutation via update sql',999,999,N'sysname',NULL,NULL,1,NULL,NULL,NULL,NULL,NULL,NULL,'2019-12-11T09:58:23.873',N'') ,(120,N'_chksum',N'a checksum used for change data capture',999,999,N'varchar',255,NULL,0,NULL,NULL,NULL,NULL,NULL,NULL,'2019-12-11T10:20:40.157',N'') ,(1000,N'_record_dt',N'timestamp of record creation (via default) or timestamp of record update ( via update sql). ',999,999,N'datetime',NULL,N'(getdate())',0,NULL,1,1,1,1,1,NULL,NULL) ,(1010,N'_record_user',N'user name of record creation (via default) or user name of record update ( via update sql). ',999,999,N'sysname',NULL,N'(suser_sname())',0,NULL,1,1,1,1,1,NULL,NULL) ,(1100,N'{{obj_name}}_sid',N'surrogate id ( unique id generated by this dwh, not from source)',200,-900,N'int',NULL,NULL,0,N'DESC',0,0,1,1,0,'2020-06-18T14:00:03.747',N'')) AS [Source] ([column_id],[column_name],[column_description],[column_type_id],[ordinal_position],[data_type],[max_len],[default_value],[is_nullable],[primary_key_sorting],[staging],[rdw],[idw],[idw_hub],[datamart],[_record_dt],[_record_user])ON ([Target].[column_id] = [Source].[column_id])WHEN MATCHED AND (	NULLIF([Source].[column_name], [Target].[column_name]) IS NOT NULL OR NULLIF([Target].[column_name], [Source].[column_name]) IS NOT NULL OR 	NULLIF([Source].[column_description], [Target].[column_description]) IS NOT NULL OR NULLIF([Target].[column_description], [Source].[column_description]) IS NOT NULL OR 	NULLIF([Source].[column_type_id], [Target].[column_type_id]) IS NOT NULL OR NULLIF([Target].[column_type_id], [Source].[column_type_id]) IS NOT NULL OR 	NULLIF([Source].[ordinal_position], [Target].[ordinal_position]) IS NOT NULL OR NULLIF([Target].[ordinal_position], [Source].[ordinal_position]) IS NOT NULL OR 	NULLIF([Source].[data_type], [Target].[data_type]) IS NOT NULL OR NULLIF([Target].[data_type], [Source].[data_type]) IS NOT NULL OR 	NULLIF([Source].[max_len], [Target].[max_len]) IS NOT NULL OR NULLIF([Target].[max_len], [Source].[max_len]) IS NOT NULL OR 	NULLIF([Source].[default_value], [Target].[default_value]) IS NOT NULL OR NULLIF([Target].[default_value], [Source].[default_value]) IS NOT NULL OR 	NULLIF([Source].[is_nullable], [Target].[is_nullable]) IS NOT NULL OR NULLIF([Target].[is_nullable], [Source].[is_nullable]) IS NOT NULL OR 	NULLIF([Source].[primary_key_sorting], [Target].[primary_key_sorting]) IS NOT NULL OR NULLIF([Target].[primary_key_sorting], [Source].[primary_key_sorting]) IS NOT NULL OR 	NULLIF([Source].[staging], [Target].[staging]) IS NOT NULL OR NULLIF([Target].[staging], [Source].[staging]) IS NOT NULL OR 	NULLIF([Source].[rdw], [Target].[rdw]) IS NOT NULL OR NULLIF([Target].[rdw], [Source].[rdw]) IS NOT NULL OR 	NULLIF([Source].[idw], [Target].[idw]) IS NOT NULL OR NULLIF([Target].[idw], [Source].[idw]) IS NOT NULL OR 	NULLIF([Source].[idw_hub], [Target].[idw_hub]) IS NOT NULL OR NULLIF([Target].[idw_hub], [Source].[idw_hub]) IS NOT NULL OR 	NULLIF([Source].[datamart], [Target].[datamart]) IS NOT NULL OR NULLIF([Target].[datamart], [Source].[datamart]) IS NOT NULL OR 	NULLIF([Source].[_record_dt], [Target].[_record_dt]) IS NOT NULL OR NULLIF([Target].[_record_dt], [Source].[_record_dt]) IS NOT NULL OR 	NULLIF([Source].[_record_user], [Target].[_record_user]) IS NOT NULL OR NULLIF([Target].[_record_user], [Source].[_record_user]) IS NOT NULL) THEN UPDATE SET  [column_name] = [Source].[column_name],   [column_description] = [Source].[column_description],   [column_type_id] = [Source].[column_type_id],   [ordinal_position] = [Source].[ordinal_position],   [data_type] = [Source].[data_type],   [max_len] = [Source].[max_len],   [default_value] = [Source].[default_value],   [is_nullable] = [Source].[is_nullable],   [primary_key_sorting] = [Source].[primary_key_sorting],   [staging] = [Source].[staging],   [rdw] = [Source].[rdw],   [idw] = [Source].[idw],   [idw_hub] = [Source].[idw_hub],   [datamart] = [Source].[datamart],   [_record_dt] = [Source].[_record_dt],   [_record_user] = [Source].[_record_user]WHEN NOT MATCHED BY TARGET THEN INSERT([column_id],[column_name],[column_description],[column_type_id],[ordinal_position],[data_type],[max_len],[default_value],[is_nullable],[primary_key_sorting],[staging],[rdw],[idw],[idw_hub],[datamart],[_record_dt],[_record_user]) VALUES([Source].[column_id],[Source].[column_name],[Source].[column_description],[Source].[column_type_id],[Source].[ordinal_position],[Source].[data_type],[Source].[max_len],[Source].[default_value],[Source].[is_nullable],[Source].[primary_key_sorting],[Source].[staging],[Source].[rdw],[Source].[idw],[Source].[idw_hub],[Source].[datamart],[Source].[_record_dt],[Source].[_record_user])WHEN NOT MATCHED BY SOURCE THEN  DELETE;GODECLARE @mergeError int , @mergeCount intSELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNTIF @mergeError != 0 BEGIN PRINT 'ERROR OCCURRED IN MERGE FOR [static].[Column]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected ENDELSE BEGIN PRINT '[static].[Column] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100)); ENDGOSET NOCOUNT OFFGO