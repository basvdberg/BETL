{
	"name": "pl_aw_staging_ddl",
	"properties": {
		"activities": [
			{
				"name": "observe source obj tree",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "-- get all databases, schemas, tables, views and columns. \ndeclare @_source as sql_variant   -- use this var to set the source system identifier. when null the sql tries to get the ext property\nselect @_source =  '@{variables('source')}'\n\n-- get all databases, schemas, tables, views and columns. \nselect \n\tisnull(o.object_id, db.database_id) external_obj_id \n\t,  case \n\t\twhen SERVERPROPERTY('EngineEdition') < 4 then 15 -- on premise\n\t\twhen SERVERPROPERTY('EngineEdition') >= 5 then 10 -- azure\n\t  end  server_type_id\n\t, @@SERVERNAME server_name \n\t, db.name db_name\n\t, s.name [schema_name]\n\t, o.name as obj_name \n\t, case \n\t\t\twhen o.type = 'U' then 10 \n\t\t\twhen o.type = 'V' then 20 \n\t\t\twhen s.name is not null then 30\n\t\t\twhen db.name is not null then 40 \n\t\t\telse 50 -- server\n\t  end obj_type_id \n\t, c.column_id ordinal_position\n\t, c.name column_name\n\t, case when ic.is_descending_key is not null then 100 else 300 end column_type_id\n\t, convert(int, c.is_nullable) is_nullable\n\t, case when t.is_user_defined=0 then t.name else t2.name end data_type   \n\t, case when t.name in ('nvarchar', 'nchar') then c.max_length /2 else c.max_length end max_len\n\t, case when t.name in ('decimal', 'numeric') then c.precision else cast(null as int) end numeric_precision\n\t, case when t.name in ('decimal', 'numeric') then ODBCSCALE(c.system_type_id, c.scale) else cast(null as int) end numeric_scale\n\t, case when ic.is_descending_key=0 then 'ASC'when ic.is_descending_key=1 then 'DESC'else null end [primary_key_sorting]\n\t, convert(nvarchar(4000),  \n\t  OBJECT_DEFINITION(c.default_object_id))   AS [default_value]\n\t , isnull(@_source, prop__source.value) _source\n\t , prop_src_obj_id.value src_obj_id\n\t , prop_obj_def_id.value obj_def_id\nfrom\n\tsys.databases db\n\tfull outer join sys.schemas s on db.database_id = db_id()\n\tleft join sys.objects o on o.schema_id = s.schema_id\n\tand o.type in ( 'U','V') -- only tables and views\n\tand o.object_id not in \n\t\t(\n\t\tselect major_id \n\t\tfrom sys.extended_properties  \n\t\twhere name = N'microsoft_database_tools_support' \n\t\tand minor_id = 0 and class = 1) -- exclude ssms diagram objects\n\tleft join sys.extended_properties prop__source on o.object_id    = prop__source.major_id    and prop__source.name = '_source'\n\tleft join sys.extended_properties prop_src_obj_id on o.object_id = prop_src_obj_id.major_id and prop_src_obj_id.name = 'src_obj_id'\n\tleft join sys.extended_properties prop_obj_def_id on o.object_id = prop_obj_def_id.major_id and prop_obj_def_id.name = 'obj_def_id'\n \n\tleft join sys.columns c on c.object_id = o.object_id \n\tleft join sys.types t on c.user_type_id = t.user_type_id \n    left join sys.types t2 on t2.system_type_id = t.system_type_id and t2.is_user_defined = 0 and t.is_user_defined = 1 and t2.name <> 'sysname'\n\t--  = s.name and col.table_name = o.name\n\t--\tleft join sys.columns col on \n\t--col.table_schema = s.name \n\t\t--and col.table_name = o.name \n\t\t--and col.COLUMN_NAME=c.name\n\tleft join sys.indexes i on \n\t\ti.object_id = o.object_id \n\t\tand i.is_primary_key = 1\n\tleft join sys.index_columns ic on \n\t\tic.object_id = o.object_id \n\t\tand ic.column_id = c.column_id\nwhere \n\tisnull(s.name,'') not in ( 'sys', 'INFORMATION_SCHEMA', 'guest') \n\tand isnull(s.name,'') not like 'db[_]%'\n\tand db.name not in ('master','model','msdb','tempdb')\n-- add users\n\nunion all \n\nselect \n\t suser_sid() external_obj_id\n\t,  case \n\t\twhen SERVERPROPERTY('EngineEdition') < 4 then 15 -- on premise\n\t\twhen SERVERPROPERTY('EngineEdition') >= 5 then 10 -- azure\n\t  end  server_type \n\t, @@SERVERNAME server_name \n\t, db_name() db_name\n\t, null [schema_name]\n\t, suser_sname()  obj_name\n\t, 60 obj_type_id -- user\n\t, null ordinal_position\n\t, null column_name\n\t, null column_type_id\n\t, null is_nullable\n\t, null data_type\n\t, null\n\t, null\n\t, null\n\t, null\n\t, null\n\t, null\n\t, null\n\t, null\n\n\n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"sqlWriterStoredProcedureName": "[dbo].[ingest_obj_tree]",
						"sqlWriterTableType": "ObjTreeTableParam",
						"storedProcedureTableTypeParameterName": "obj_tree_param",
						"storedProcedureParameters": {
							"batch_id": {
								"type": "Int32",
								"value": null
							},
							"detect_schema_delete": {
								"type": "Boolean",
								"value": null
							},
							"detect_table_delete": {
								"type": "Boolean",
								"value": null
							},
							"detect_user_delete": {
								"type": "Boolean",
								"value": null
							},
							"detect_view_delete": {
								"type": "Boolean",
								"value": null
							},
							"is_definition": {
								"type": "Boolean",
								"value": null
							}
						},
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_aw",
						"type": "DatasetReference",
						"parameters": {
							"schema_name": "dbo",
							"table_name": "dummy"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_betl",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "set include_staging property",
				"description": "Needs to be done only once, but for demo purposes we set this in the PL",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "observe source obj tree",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "-- lets take the entire aw database \nexec setp 'include_staging', 1, '@{variables('db_name')}'\n\n-- but exclude some tables that we don't need. \nexec setp 'include_staging', 0, '@{variables('db_name')}.[SalesLT].[Address]'\nexec setp 'include_staging', 0, '@{variables('db_name')}.[SalesLT].[ProductModel]'\nexec setp 'include_staging', 0, '@{variables('db_name')}.[dbo].[BuildVersion]';\n\n-- always return something for the lookup component in ADF\nselect 'done' result",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_betl",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "define staging obects",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "set include_staging property",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT \n\t null external_obj_id -- this is an object id outside betl for this object. \n\t  , server_type_id \n\t  , 'sqls-betl-dev' server_name \n\t  , 'sqldb-rdw' db_name \n      , 'staging_aw' schema_name \n      , case when schema_name <> 'dbo' then schema_name +'_' else '' end + [obj_name] [obj_name]\n\t  ,10 [obj_type_id]  -- table\n      ,c.ordinal_position -- stays the same\n      ,c.column_name\n      ,c.column_type_id\n      ,c.is_nullable\n      ,c.data_type\n      ,c.max_len\n      ,c.numeric_precision\n      ,c.numeric_scale\n      ,c.primary_key_sorting\n      ,null default_value -- just copy contents. Do not use source system defaults. \n      ,'aw' _source\n\t , o.[obj_id] src_obj_id -- this is the betl internal reference to the main object/table that acted as a source for this object\n\t , null obj_def_id \n--select * \nfrom prop_ext pe \ninner join dbo.obj_ext o on pe.obj_id = o.obj_id\ninner join dbo.col c on c.obj_id= o.obj_id\nwhere property = 'include_staging' and inherited_value = 1 \nand pe.obj_type = 'table' \nand o._source = '@{variables('source')}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"sqlWriterStoredProcedureName": "[dbo].[ingest_obj_tree]",
						"sqlWriterTableType": "ObjTreeTableParam",
						"storedProcedureTableTypeParameterName": "obj_tree_param",
						"storedProcedureParameters": {
							"batch_id": {
								"type": "Int32",
								"value": "0"
							},
							"detect_schema_delete": {
								"type": "Boolean",
								"value": "false"
							},
							"detect_table_delete": {
								"type": "Boolean",
								"value": "true"
							},
							"detect_user_delete": {
								"type": "Boolean",
								"value": "false"
							},
							"detect_view_delete": {
								"type": "Boolean",
								"value": "false"
							},
							"is_definition": {
								"type": "Boolean",
								"value": "true"
							}
						},
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": true
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_betl",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_betl",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Materialize staging tables DDL",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "define staging obects",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pl_generate_and_exec_sql",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"source": "aw",
						"schema_name": "staging_aw",
						"template_type": "ddl"
					}
				}
			},
			{
				"name": "observe dwh object tree",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Materialize staging tables DDL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pl_observe_dwh_obj_tree",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			}
		],
		"variables": {
			"source": {
				"type": "String",
				"defaultValue": "aw"
			},
			"db_name": {
				"type": "String",
				"defaultValue": "sqldb-aw"
			},
			"target_schema_name": {
				"type": "String",
				"defaultValue": "staging-aw"
			}
		},
		"folder": {
			"name": "aw"
		},
		"annotations": [],
		"lastPublishTime": "2021-07-07T15:48:49Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}